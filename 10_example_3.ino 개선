#include <Servo.h>
#include <math.h>

#define PIN_TRIG 12
#define PIN_ECHO 13
#define PIN_SERVO 10
#define PIN_LED 9

#define SND_VEL 346.0
#define OPEN_DIST 20.0
#define CLOSE_DIST 30.0
#define MOVING_TIME 4000

Servo myServo;
unsigned long moveStartTime = 0;
bool isOpen = false;
int startAngle = 0;
int stopAngle = 90;

float getDistance() {
  digitalWrite(PIN_TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(PIN_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(PIN_TRIG, LOW);
  float duration = pulseIn(PIN_ECHO, HIGH);
  float distance = (duration / 2.0) * (SND_VEL / 10000.0);
  return distance;
}

float smoothSigmoid(float x) {
  return 1.0 / (1.0 + exp(-12.0 * (x - 0.5)));
}

void setup() {
  Serial.begin(9600);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  pinMode(PIN_LED, OUTPUT);
  myServo.attach(PIN_SERVO);
  myServo.write(startAngle);
  digitalWrite(PIN_LED, LOW);
  delay(500);
}

void loop() {
  float distance = getDistance();
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  if (!isOpen && distance <= OPEN_DIST) {
    digitalWrite(PIN_LED, HIGH);
    moveStartTime = millis();
    for (unsigned long t = 0; t <= MOVING_TIME; t += 50) {
      float progress = (float)t / MOVING_TIME;
      float smoothProgress = smoothSigmoid(progress);
      int angle = startAngle + (stopAngle - startAngle) * smoothProgress;
      myServo.write(angle);
      delay(50);
    }
    isOpen = true;
  }

  if (isOpen && distance >= CLOSE_DIST) {
    moveStartTime = millis();
    for (unsigned long t = 0; t <= MOVING_TIME; t += 50) {
      float progress = (float)t / MOVING_TIME;
      float smoothProgress = smoothSigmoid(progress);
      int angle = stopAngle - (stopAngle - startAngle) * smoothProgress;
      myServo.write(angle);
      delay(50);
    }
    digitalWrite(PIN_LED, LOW);
    isOpen = false;
  }

  delay(200);
}
