#define PIN_LED  9
#define PIN_TRIG 12
#define PIN_ECHO 13

#define SND_VEL 346.0
#define INTERVAL 25
#define PULSE_DURATION 10
#define _DIST_MIN 100
#define _DIST_MAX 300
#define TIMEOUT ((INTERVAL / 2) * 1000.0)
#define SCALE (0.001 * 0.5 * SND_VEL)

#define N 30

unsigned long last_sampling_time;
float samples[N];
int idx = 0;
bool filled = false;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);
  Serial.begin(57600);
}

float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);

  long duration = pulseIn(ECHO, HIGH, TIMEOUT);
  if(duration == 0) return -1;
  return duration * SCALE;
}

float medianFilter(float new_val) {
  samples[idx++] = new_val;
  if(idx >= N) { idx = 0; filled = true; }

  int size = filled ? N : idx;
  float temp[size];
  for(int i=0; i<size; i++) temp[i] = samples[i];

  for(int i=0; i<size-1; i++) {
    for(int j=i+1; j<size; j++) {
      if(temp[i] > temp[j]) {
        float t = temp[i];
        temp[i] = temp[j];
        temp[j] = t;
      }
    }
  }

  if(size % 2 == 1) return temp[size/2];
  else return (temp[size/2-1] + temp[size/2]) / 2.0;
}

void loop() {
  if(millis() < last_sampling_time + INTERVAL) return;

  float dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);
  if(dist_raw < 0) dist_raw = _DIST_MAX + 100;

  float dist_median = medianFilter(dist_raw);

  Serial.print("Min:"); Serial.print(_DIST_MIN);
  Serial.print(",raw:"); Serial.print(min(dist_raw, _DIST_MAX + 100));
  Serial.print(",median:"); Serial.print(min(dist_median, _DIST_MAX + 100));
  Serial.print(",Max:"); Serial.println(_DIST_MAX);

  if(dist_median < _DIST_MIN || dist_median > _DIST_MAX)
    digitalWrite(PIN_LED, HIGH);
  else
    digitalWrite(PIN_LED, LOW);

  last_sampling_time += INTERVAL;
}
